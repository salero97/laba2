<?php
// Функция для вычисления минимального количества операций и восстановления последовательности
function minOperations($target) {
    $n = strlen($target); // Получение длины целевой строки
    $dp = range(0, $n); // Инициализация массива для хранения минимального числа операций для каждого префикса
    $usedDouble = false; // Флаг, указывающий, использовали ли операцию удвоения на текущем этапе

    // Проходим по всем префиксам строки
    for ($i = 1; $i <= $n; $i++) {
        $dp[$i] = $dp[$i-1] + 1; // Изначально предполагаем, что последняя операция – добавление последнего символа
        
        // Проверка возможности удвоения (если еще не использовали и условия совпадают)
        if (!$usedDouble && $i % 2 == 0 && 
            substr($target, 0, $i/2) == substr($target, $i/2, $i/2)) {
            // Если удвоение уменьшает число операций, обновляем значение
            if ($dp[$i/2] + 1 < $dp[$i]) {
                $dp[$i] = $dp[$i/2] + 1; // Обновление минимального числа операций для этого префикса
                $usedDouble = true; // Отмечаем, что удвоение использовано
            }
        }
    }

    // Восстановление последовательности действий
    $sequence = []; // Массив для хранения последовательности
    $i = $n; // Начинаем с конца строки
    $doubleUsed = false; // Флаг, использовали ли удвоение при восстановлении

    // Обратный проход по строке для восстановления последовательности
    while ($i > 0) {
        // Проверка, было ли последнее действие удвоением
        if (!$doubleUsed && $i % 2 == 0 && 
            substr($target, 0, $i/2) == substr($target, $i/2, $i/2) && 
            $dp[$i] == $dp[$i/2] + 1) {
            // Добавляем в последовательность операцию удвоения с полученной частью строки
            array_push($sequence, "Удвоение (получено '" . substr($target, 0, $i) . "')");
            $i = (int)($i / 2); // Переход к состоянию перед удвоением
            $doubleUsed = true; // Указываем, что удвоение было использовано
        } else {
            // Добавляем операцию добавления символа
            array_push($sequence, "Добавлен '" . $target[$i-1] . "'");
            $i--; // Переход к предыдущему символу
        }
    }

    // Возвращаем результат: минимальное число операций и полученную последовательность (в обратном порядке)
    return [
        'steps' => $dp[$n], // Количество операций
        'sequence' => array_reverse($sequence) // Обратный порядок для правильного отображения
    ];
}

// Основной блок программы
echo "Введите целевую строку: ";
$target = trim(fgets(STDIN)); // Читаем строку из входных данных
$result = minOperations($target); // Вызываем функцию для получения результата
echo "Минимальное количество операций: " . $result['steps'] . "\n"; // Выводим минимальное число операций
echo "Последовательность:\n"; // Заголовок для последовательности
foreach ($result['sequence'] as $i => $step) { // Перебираем и выводим каждое действие
    echo ($i + 1) . ". " . $step . "\n"; // Нумерация и описание каждого шага
}

?>